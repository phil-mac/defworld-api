{
  "version": 3,
  "sources": ["../../entities/node.ts"],
  "sourcesContent": ["const { DataTypes } = require('sequelize');\nconst { withFilter } = require('graphql-subscriptions');\nconst interpreterService = require('../services/interpreterService');\nconst { gridSideLength } = require('./world');\n\nconst typeDefs = `\n  type Query {\n    node(id: ID!): Node!\n  }\n\n  type Mutation {\n    createNode(worldId: ID!, pos: [Int!]!): Node!\n    updateNodeContent(id: ID!, content: String!): Node!\n  }\n\n  type Subscription {\n    nodeCreated(worldId: ID!): World!\n  }\n\n  type Node {\n    id: ID!\n    content: String!\n    result: String\n    blocks: String\n    pos: [Int!]!\n  }\n`;\n\nconst define = sequelize => sequelize.define('node', {\n  content: {\n    type: DataTypes.STRING(4096),\n    allowNull: false,\n    defaultValue: ''\n  },\n  pos: {\n    type: DataTypes.ARRAY(DataTypes.INTEGER),\n    allowNull: false\n  }\n});\n\nconst resolvers = (models, pubsub) => ({\n  Query: {\n    node: async (parent: any, args: any) => {\n      const { id } = args;\n      return await models.node.findOne({ where: { id } });\n    },\n  },\n  Mutation: {\n    createNode: async (parent: any, args: any) => {\n      const { worldId, pos } = args;\n      const scriptNode = await models.node.create({ worldId, pos });\n\n      // copy paste from below, could be abstracted \n      const world = await models.world.findOne({ where: { id: worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n      \n      const index = pos[0] + (gridSideLength * pos[1]);\n      grid[index] = [scriptNode.id, 50];\n\n      let updatedWorld = await models.world.update({grid}, {where: {id: worldId}, returning: true, plain: true});\n      updatedWorld = updatedWorld[1].toJSON();\n\n      pubsub.publish('NODE_CREATED', { nodeCreated: updatedWorld });\n      \n      return scriptNode.toJSON();\n    },\n    updateNodeContent: async (parent: any, args: any) => {\n      const { id, content } = args;\n\n      const { result } = await interpreterService.interpretGen(content);\n      console.log(result);\n\n       const scriptNode = await models.node.update(\n        { content },\n        { where: { id }, returning: true, plain: true });\n\n      const n = scriptNode[1].toJSON();\n\n\n      const blocks = result.blocks; // [{x:1, y:1, z:1}, {x:2, y:2, z:2}]\n\n      const world = await models.world.findOne({ where: { id: n.worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n\n      let blocksObj = {};\n      \n      blocks.forEach(block => {\n        const x = n.pos[0] + block.x;\n        const y = n.pos[1] - block.y;\n        const index = x + (gridSideLength * y);\n        blocksObj[index] = [n.id, 5];\n      });\n\n      // clear grid of old blocks from this node\n       grid.forEach((el, i) => {\n        if (el[0] === n.id && el[1] !== 50){\n          grid[i] = [0, 0];\n        }\n      })\n\n      grid.forEach((el, i) => {\n        let b = blocksObj[i];\n        if (!!b){\n          grid[i] = b;\n        }\n      })\n\n      await models.world.update({grid}, {where: {id: n.worldId}});\n      \n      return {...n, result: result.result, blocks: JSON.stringify(result.blocks)};\n    }\n  },\n  Subscription: {\n    nodeCreated: {\n      subscribe: withFilter(\n        () => pubsub.asyncIterator(['NODE_CREATED']),\n        (payload, variables) =>  {\n          const isSpecificWorld = payload.nodeCreated.id == variables.worldId\n          return isSpecificWorld;\n        }\n      ),\n    }\n  },\n});\n\nmodule.exports = { typeDefs, define, resolvers }"],
  "mappings": "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",
  "names": []
}
