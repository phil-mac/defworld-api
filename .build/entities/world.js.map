{
  "version": 3,
  "sources": ["../../entities/world.ts"],
  "sourcesContent": ["import { DataTypes, Sequelize } from 'sequelize';\n\nconst typeDefs = `\n  type World {\n    id: ID!\n    name: String!\n    nodes: [Node!]\n    worldUsers: [WorldUser!]!\n  }\n\n  type Query {\n    world(id: ID!): World!\n    worlds: [World!]!\n  }\n\n  type Mutation {\n    createWorld(name: String!): World!\n  }\n`;\n\nconst define = (sequelize: Sequelize) => sequelize.define('world', {\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n});\n\nconst resolvers = (models: any) => ({\n  Query: {\n    world: async (parent: any, args: any) => {\n      const { id } = args;\n      return await models.world.findOne({ where: { id } });\n    },\n    worlds: async () => {\n      return await models.world.findAll();\n    }\n  },\n  Mutation: {\n    createWorld: async (parent: any, args: any) => {\n      const { name } = args;\n      const world = await models.world.create({ name });\n      return world.toJSON();\n    },\n  },\n  World: {\n    nodes: async (world: any) => {\n      return await models.node.findAll({ where: { worldId: world.id }, order: [['id', 'ASC']] });\n    },\n    worldUsers: async (world: any) => {\n      return await models.worldUser.findAll({ where: { worldId: world.id } });\n    },\n  },\n});\n\n\nmodule.exports = { typeDefs, define, resolvers };"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,uBAAqC;AAErC,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBjB,MAAM,SAAS,CAAC,cAAyB,UAAU,OAAO,SAAS;AAAA,EACjE,MAAM;AAAA,IACJ,MAAM,2BAAU;AAAA,IAChB,WAAW;AAAA;AAAA;AAIf,MAAM,YAAY,CAAC,WAAiB;AAAA,EAClC,OAAO;AAAA,IACL,OAAO,OAAO,QAAa,SAAc;AACvC,YAAM,EAAE,OAAO;AACf,aAAO,MAAM,OAAO,MAAM,QAAQ,EAAE,OAAO,EAAE;AAAA;AAAA,IAE/C,QAAQ,YAAY;AAClB,aAAO,MAAM,OAAO,MAAM;AAAA;AAAA;AAAA,EAG9B,UAAU;AAAA,IACR,aAAa,OAAO,QAAa,SAAc;AAC7C,YAAM,EAAE,SAAS;AACjB,YAAM,QAAQ,MAAM,OAAO,MAAM,OAAO,EAAE;AAC1C,aAAO,MAAM;AAAA;AAAA;AAAA,EAGjB,OAAO;AAAA,IACL,OAAO,OAAO,UAAe;AAC3B,aAAO,MAAM,OAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,SAAS,MAAM,MAAM,OAAO,CAAC,CAAC,MAAM;AAAA;AAAA,IAElF,YAAY,OAAO,UAAe;AAChC,aAAO,MAAM,OAAO,UAAU,QAAQ,EAAE,OAAO,EAAE,SAAS,MAAM;AAAA;AAAA;AAAA;AAMtE,OAAO,UAAU,EAAE,UAAU,QAAQ;",
  "names": []
}
