{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// https://api.elephantsql.com/console/22b867f3-f91d-4cc1-a98f-0ca00c11f316/browser\n\nconst express = require('express');\nconst http = require('http');\nconst cors = require('cors');\nconst { Sequelize, DataTypes } = require('sequelize');\nconst { ApolloServer, gql } = require('apollo-server-express');\nconst { ApolloServerPluginDrainHttpServer } = require('apollo-server-core');\nconst { interpretGen } = require('./interpreterService');\n\n\nconst app = express();\napp.use(cors());\n\napp.get('/', async (req: any, res: any) => {\n  res.send('Hello world');\n});\n\nconst typeDefs = gql(`\n  type Query {\n    hello: String!\n    users: [User!]!\n    worlds: [World!]!\n    world(id: ID!): World!\n    node(id: ID!): Node!\n  }\n\n  type Mutation {\n    createUser(name: String!): User!\n    createWorld(name: String!): World!\n    createNode(worldId: ID!, pos: [Int!]!): Node!\n    updateNodeContent(id: ID!, content: String!): Node!\n  }\n\n  type User {\n    id: ID!\n    name: String!\n  }\n\n  type World {\n    id: ID!\n    name: String!\n    nodes: [Node!]\n    grid: [[Int!]!]\n  }\n\n  type Node {\n    id: ID!\n    content: String!\n    result: String\n    blocks: String\n    pos: [Int!]!\n  }\n`);\n\nconst gridSideLength = 50;\n\nconst sequelize = new Sequelize(process.env.POSTGRES);\n\nconst User = sequelize.define('user', {\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n}, {});\n\nconst World = sequelize.define('world', {\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  grid: {\n    type: DataTypes.ARRAY(DataTypes.ARRAY(DataTypes.INTEGER)),\n    allowNull: false,\n    defaultValue: [...Array(Math.pow(gridSideLength, 2))].map(e => Array(2).fill(0))\n  }\n});\n\nconst ScriptNode = sequelize.define('node', {\n  content: {\n    type: DataTypes.STRING(4096),\n    allowNull: false,\n    defaultValue: ''\n  },\n  pos: {\n    type: DataTypes.ARRAY(DataTypes.INTEGER),\n    allowNull: false\n  }\n})\n\nWorld.hasMany(ScriptNode);\nScriptNode.belongsTo(World);\n\nconst resolvers = {\n  Query: {\n    hello: () => {\n      return 'Hello world!';\n    },\n    users: async () => {\n      return await User.findAll();\n    },\n    worlds: async () => {\n      return await World.findAll();\n    },\n    world: async (parent: any, args: any) => {\n      const { id } = args;\n      return await World.findOne({ where: { id } });\n    },\n    node: async (parent: any, args: any) => {\n      const { id } = args;\n      return await ScriptNode.findOne({ where: { id } });\n    }\n  },\n  Mutation: {\n    createUser: async (parent: any, args: any) => {\n      const { name } = args;\n      const user = await User.create({ name });\n      return user.toJSON();\n    },\n    createWorld: async (parent: any, args: any) => {\n      const { name } = args;\n      const world = await World.create({ name });\n      return world.toJSON();\n    },\n    createNode: async (parent: any, args: any) => {\n      const { worldId, pos } = args;\n      const scriptNode = await ScriptNode.create({ worldId, pos });\n\n      // copy paste from below, could be abstracted \n      const world = await World.findOne({ where: { id: worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n      \n      const index = pos[0] + (gridSideLength * pos[1]);\n      grid[index] = [scriptNode.id, 50];\n\n      await World.update({grid}, {where: {id: worldId}});\n      \n      return scriptNode.toJSON();\n    },\n    updateNodeContent: async (parent: any, args: any) => {\n      const { id, content } = args;\n\n      const { result } = await interpretGen(content);\n      console.log(result);\n\n      const scriptNode = await ScriptNode.update(\n        { content }, \n        { where: { id }, returning: true, plain: true });\n\n      const n = scriptNode[1].toJSON();\n\n\n      const blocks = result.blocks; // [{x:1, y:1, z:1}, {x:2, y:2, z:2}]\n\n      const world = await World.findOne({ where: { id: n.worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n\n      let blocksObj = {};\n\n      \n      \n      blocks.forEach(block => {\n        const x = n.pos[0] + block.x;\n        const y = n.pos[1] - block.y;\n        const index = x + (gridSideLength * y);\n        blocksObj[index] = [n.id, 5];\n      });\n\n      // clear grid of old blocks from this node\n       grid.forEach((el, i) => {\n        if (el[0] === n.id && el[1] !== 50){\n          grid[i] = [0, 0];\n        }\n      })\n\n      grid.forEach((el, i) => {\n        let b = blocksObj[i];\n        if (!!b){\n          grid[i] = b;\n        }\n      })\n\n      await World.update({grid}, {where: {id: n.worldId}});\n      \n      return {...n, result: result.result, blocks: JSON.stringify(result.blocks)};\n    }\n  },\n  World: {\n    nodes: async (world: any) => {\n      return await ScriptNode.findAll({ where: { worldId: world.id }, order: [['id', 'ASC']] });\n    }\n  }\n};\n\nconst httpServer = http.createServer(app);\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })]\n});\n\nconst nodeContent = `(def! \n  line \n  (fn* (len)\n    (do\n      (block len len len)\n      (if (> len 0) \n        (line (- len 1))\n        \"done\"))))\n\n(line 7)\n`;\n\n(async () => {\n  await sequelize.sync({ force: true });\n  await User.create({ name: 'Phil' });\n\n  const worldOne = await World.create({ name: 'Terra One'});\n  \n  const worldTwo = await World.create({ name: 'New world' });\n\n  await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [3, 3]})\n  await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [5, 2]})\n  \n  // await ScriptNode.create({ worldId: worldOne.id, content: nodeContent })\n  // await ScriptNode.create({ worldId: worldOne.id, content: '42' })\n\n  await server.start();\n  server.applyMiddleware({ app });\n\n  await new Promise(resolve => httpServer.listen({ port: 4000 }, resolve));\n})();"],
  "mappings": "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",
  "names": []
}
