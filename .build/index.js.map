{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// https://api.elephantsql.com/console/22b867f3-f91d-4cc1-a98f-0ca00c11f316/browser\n\nimport http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport sockets from 'socket.io';\nimport { ApolloServer } from 'apollo-server-express';\nimport { ApolloServerPluginDrainHttpServer } from 'apollo-server-core';\n\nimport {initSocketService} from './services/socketService';\n\nconst { schema, seedDatabase } = require('./schema');\n\n// ---- express ----\nconst app = express();\napp.use(cors());\napp.get('/', async (req: any, res: any) => {\n  res.send('Hello world');\n});\n\n// ---- http ----\nconst httpServer = http.createServer(app);\n\n// ---- sockets ----\nconst io = sockets(httpServer, {\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST']\n  },\n});\n\n// ---- graphQL ----\nconst server = new ApolloServer({\n  schema,\n  csrfPrevention: true,\n  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })]\n});\n\n// ---- listen, with option of seeding database ----\n(async () => {\n  if (false) await seedDatabase();\n  \n  await server.start();\n  server.applyMiddleware({ app });\n\n  await new Promise(resolve => httpServer.listen({ port: 4000 }, resolve));\n  \n  initSocketService(io);\n})();\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAEA,kBAAiB;AACjB,qBAAoB;AACpB,kBAAiB;AACjB,oBAAoB;AACpB,mCAA6B;AAC7B,gCAAkD;AAElD,2BAAgC;AAEhC,MAAM,EAAE,QAAQ,iBAAiB,QAAQ;AAGzC,MAAM,MAAM;AACZ,IAAI,IAAI;AACR,IAAI,IAAI,KAAK,OAAO,KAAU,QAAa;AACzC,MAAI,KAAK;AAAA;AAIX,MAAM,aAAa,oBAAK,aAAa;AAGrC,MAAM,KAAK,2BAAQ,YAAY;AAAA,EAC7B,MAAM;AAAA,IACJ,QAAQ;AAAA,IACR,SAAS,CAAC,OAAO;AAAA;AAAA;AAKrB,MAAM,SAAS,IAAI,0CAAa;AAAA,EAC9B;AAAA,EACA,gBAAgB;AAAA,EAChB,SAAS,CAAC,iEAAkC,EAAE;AAAA;AAIhD,AAAC,aAAY;AACX,MAAI;AAAO,UAAM;AAEjB,QAAM,OAAO;AACb,SAAO,gBAAgB,EAAE;AAEzB,QAAM,IAAI,QAAQ,aAAW,WAAW,OAAO,EAAE,MAAM,OAAQ;AAE/D,8CAAkB;AAAA;",
  "names": []
}
