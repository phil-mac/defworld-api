{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// https://api.elephantsql.com/console/22b867f3-f91d-4cc1-a98f-0ca00c11f316/browser\n\nconst express = require('express');\nconst http = require('http');\nconst cors = require('cors');\nconst sockets = require('socket.io');\nconst { Sequelize, DataTypes } = require('sequelize');\nconst { ApolloServer, gql } = require('apollo-server-express');\nconst { ApolloServerPluginDrainHttpServer } = require('apollo-server-core');\nconst { makeExecutableSchema } = require('@graphql-tools/schema');\nconst { WebSocketServer } = require('ws');\nconst { useServer } = require('graphql-ws/lib/use/ws');\nconst { PubSub, withFilter } = require('graphql-subscriptions');\nconst { interpretGen } = require('./interpreterService');\n\n\nconst app = express();\napp.use(cors());\n\nconst httpServer = http.createServer(app);\n\n// const io = sockets(httpServer);\n\nconst io = sockets(httpServer, {\n  cors: {\n    origin: '*',\n    handlePreflightRequest: (req, res) => {\n      console.log(\"um hi\")\n      res.writeHead(200, {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST',\n      });\n      red.end();\n    }\n  }\n});\n\napp.get('/', async (req: any, res: any) => {\n  res.send('Hello world');\n});\n\nconst socketWorlds = {};\nconst socketNodes = {};\n\nio.on('connection', socket => {\n  console.log('client connected to socket');\n  // console.log({socket})\n\n  socket.on('joinWorld', ({name, worldId}) => {\n    socket.join(`world-${worldId}`);\n    socketWorlds[socket.id] = `world-${worldId}`;\n    console.log({socketWorlds});\n    socket.in(`world-${worldId}`).emit('broadcast', name + 'joined world ' + worldId);\n  });\n  \n  socket.on('message', data => {\n    console.log('new message: ' + data);\n    // console.log({socket});\n    console.log('room: ', socketWorlds[socket.id]);\n    io.in(socketWorlds[socket.id]).emit('broadcast', data);\n  });\n\n  socket.on('joinNode', ({name, nodeId}) => {\n    socket.join(`node-${nodeId}`);\n    socketNodes[socket.id] = `node-${nodeId}`;\n    console.log({socketNodes});\n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'joined node ' + nodeId);\n  });\n\n  socket.on('leaveNode', ({name, nodeId}) => {\n    socket.leave(`node-${nodeId}`);\n    delete socketNodes[socket.id];\n    console.log({socketNodes});\n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'left node ' + nodeId);\n  });\n\n  socket.on('updateText', ({type, pos, text}) => {\n    console.log('broadcast update text')\n    socket.in(socketNodes[socket.id]).emit('textUpdated', { type, pos, text });\n  })\n\n  \n  socket.on('disconnect', () => {\n    console.log('client disconnected from socket')\n    delete socketWorlds[socket.id];\n    delete socketNodes[socket.id];\n  })\n})\n\n// io.listen(4040);\n\nconst pubsub = new PubSub();\n\nconst typeDefs = gql(`\n  type Query {\n    hello: String!\n    user(id: ID!): User!\n    users: [User!]!\n    world(id: ID!): World!\n    worlds: [World!]!\n    node(id: ID!): Node!\n  }\n\n  type Mutation {\n    createUser(username: String!): User!\n    createWorld(name: String!): World!\n    createNode(worldId: ID!, pos: [Int!]!): Node!\n    updateNodeContent(id: ID!, content: String!): Node!\n  }\n\n  type Subscription {\n    nodeCreated(worldId: ID!): World!\n  }\n\n  type User {\n    id: ID!\n    username: String!\n    worldUsers: [WorldUser!]!\n  }\n\n  type World {\n    id: ID!\n    name: String!\n    nodes: [Node!]\n    grid: [[Int!]!]\n    worldUsers: [WorldUser!]!\n  }\n\n  type WorldUser {\n    id: ID!\n    userId: ID!\n    user: User!\n    worldId: ID!\n    world: World!\n    lastVisited: Float!\n  }\n\n  type Node {\n    id: ID!\n    content: String!\n    result: String\n    blocks: String\n    pos: [Int!]!\n  }\n`);\n\nconst gridSideLength = 50;\n\nconst sequelize = new Sequelize(process.env.POSTGRES);\n\nconst User = sequelize.define('user', {\n  username: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n}, {});\n\nconst World = sequelize.define('world', {\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  grid: {\n    type: DataTypes.ARRAY(DataTypes.ARRAY(DataTypes.INTEGER)),\n    allowNull: false,\n    defaultValue: [...Array(Math.pow(gridSideLength, 2))].map(e => Array(2).fill(0))\n  }\n});\n\nconst WorldUser = sequelize.define('worldUser', {\n  id: {\n    primaryKey: true,\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    autoIncrement: true,\n  },\n  userId: {\n    type: DataTypes.INTEGER,\n    reference: {\n      model: User,\n      key: 'id'\n    }\n  },\n  worldId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: World,\n      key: 'id'\n    }\n  },\n  lastVisited: {\n    type: DataTypes.BIGINT,\n    allowNull: false,\n    defaultValue: (new Date()).getTime()\n  },\n});\n\nWorld.belongsToMany(User, { through: WorldUser });\nUser.belongsToMany(World, { through: WorldUser });\n\nconst ScriptNode = sequelize.define('node', {\n  content: {\n    type: DataTypes.STRING(4096),\n    allowNull: false,\n    defaultValue: ''\n  },\n  pos: {\n    type: DataTypes.ARRAY(DataTypes.INTEGER),\n    allowNull: false\n  }\n})\n\nWorld.hasMany(ScriptNode);\nScriptNode.belongsTo(World);\n\nconst resolvers = {\n  Query: {\n    hello: () => {\n      return 'Hello world!';\n    },\n    user: async (parent: any, args: any) => {\n      const { id } = args;\n      return await User.findOne({ where: { id } });\n    },\n    users: async () => {\n      return await User.findAll();\n    },\n    world: async (parent: any, args: any) => {\n      const { id } = args;\n      return await World.findOne({ where: { id } });\n    },\n    worlds: async () => {\n      return await World.findAll();\n    },\n    node: async (parent: any, args: any) => {\n      const { id } = args;\n      return await ScriptNode.findOne({ where: { id } });\n    }\n  },\n  Mutation: {\n    createUser: async (parent: any, args: any) => {\n      const { username } = args;\n      const existingUser = await User.findOne({ where: { username }});\n      if (!!existingUser){\n        return existingUser.toJSON();\n      } else {\n        const user = await User.create({ username });\n        return user.toJSON();\n      } \n    },\n    createWorld: async (parent: any, args: any) => {\n      const { name } = args;\n      const world = await World.create({ name });\n      return world.toJSON();\n    },\n    createNode: async (parent: any, args: any) => {\n      const { worldId, pos } = args;\n      const scriptNode = await ScriptNode.create({ worldId, pos });\n\n      // copy paste from below, could be abstracted \n      const world = await World.findOne({ where: { id: worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n      \n      const index = pos[0] + (gridSideLength * pos[1]);\n      grid[index] = [scriptNode.id, 50];\n\n      let updatedWorld = await World.update({grid}, {where: {id: worldId}, returning: true, plain: true});\n      updatedWorld = updatedWorld[1].toJSON();\n\n      pubsub.publish('NODE_CREATED', { nodeCreated: updatedWorld });\n      \n      return scriptNode.toJSON();\n    },\n    updateNodeContent: async (parent: any, args: any) => {\n      const { id, content } = args;\n\n      const { result } = await interpretGen(content);\n      console.log(result);\n\n      const scriptNode = await ScriptNode.update(\n        { content }, \n        { where: { id }, returning: true, plain: true });\n\n      const n = scriptNode[1].toJSON();\n\n\n      const blocks = result.blocks; // [{x:1, y:1, z:1}, {x:2, y:2, z:2}]\n\n      const world = await World.findOne({ where: { id: n.worldId }});\n      const grid = world.toJSON().grid; // [ [1,1], [2,2] ]\n\n      let blocksObj = {};\n      \n      blocks.forEach(block => {\n        const x = n.pos[0] + block.x;\n        const y = n.pos[1] - block.y;\n        const index = x + (gridSideLength * y);\n        blocksObj[index] = [n.id, 5];\n      });\n\n      // clear grid of old blocks from this node\n       grid.forEach((el, i) => {\n        if (el[0] === n.id && el[1] !== 50){\n          grid[i] = [0, 0];\n        }\n      })\n\n      grid.forEach((el, i) => {\n        let b = blocksObj[i];\n        if (!!b){\n          grid[i] = b;\n        }\n      })\n\n      await World.update({grid}, {where: {id: n.worldId}});\n      \n      return {...n, result: result.result, blocks: JSON.stringify(result.blocks)};\n    }\n  },\n  Subscription: {\n    nodeCreated: {\n      subscribe: withFilter(\n        () => pubsub.asyncIterator(['NODE_CREATED']),\n        (payload, variables) =>  {\n          const isSpecificWorld = payload.nodeCreated.id == variables.worldId\n          return isSpecificWorld;\n        }\n      ),\n    }\n  },\n  User: {\n    worldUsers: async (user: any) => {\n      return await WorldUser.findAll({ where: { userId: user.id }});\n    },\n  },\n  World: {\n    nodes: async (world: any) => {\n      return await ScriptNode.findAll({ where: { worldId: world.id }, order: [['id', 'ASC']] });\n    },\n    worldUsers: async (world: any) => {\n      return await WorldUser.findAll({ where: { worldId: world.id }});\n    },\n  },\n  WorldUser: {\n    user: async (worldUser: any) => {\n      return await User.findOne({where: {id: worldUser.userId}});\n    },\n    world: async (worldUser: any) => {\n      return await World.findOne({where: {id: worldUser.worldId}});\n    }\n  }\n};\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\n\nconst wsServer = new WebSocketServer({\n  server: httpServer,\n  path: '/subscriptions',\n});\n\nconst serverCleanup = useServer({ schema }, wsServer);\n\nconst server = new ApolloServer({\n  schema,\n  csrfPrevention: true,\n  plugins: [\n    ApolloServerPluginDrainHttpServer({ httpServer }),\n    {\n      async serverWillStart() {\n        return {\n          async drainServer() {\n            await serverCleanup.dispose();\n          }\n        }\n      }\n    }\n  ]\n});\n\nconst nodeContent = `(def! \n  line \n  (fn* (len)\n    (do\n      (block len len len)\n      (if (> len 0) \n        (line (- len 1))\n        \"done\"))))\n\n(line 7)\n`;\n\nconst shouldResetDB = false;\n(async () => {\n  if (shouldResetDB) {\n    await sequelize.sync({ force: true });\n    const userOne = await User.create({ username: 'Phil' });\n    const worldOne = await World.create({ name: 'Terra One'});\n  \n    await WorldUser.create({ userId: userOne.id, worldId: worldOne.id });\n    \n    const worldTwo = await World.create({ name: 'New world' });\n  \n    await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [3, 3]})\n    await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [5, 2]})\n  }\n  \n\n  await server.start();\n  server.applyMiddleware({ app });\n\n  await new Promise(resolve => httpServer.listen({ port: 4000 }, resolve));\n})();"],
  "mappings": "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",
  "names": []
}
