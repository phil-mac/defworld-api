{
  "version": 3,
  "sources": ["../schema.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport merge from 'lodash/merge';\nimport { gql } from 'apollo-server-core';\nimport { Sequelize } from 'sequelize';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst sequelize = new Sequelize(process.env.POSTGRES as string);\n\nexport const models = generateModels();\n\nconst typeDefs = generateTypeDefs();\nconst resolvers = generateResolvers();\nexport const schema = makeExecutableSchema({ typeDefs, resolvers });\n\n// could import seedDatabase functions from elsewhere, and call using `models` here\nexport const seedDatabase = async () => {\n  await sequelize.sync({ force: true });\n\n  const userOne = await models.user.create({ username: 'Phil' });\n  const worldOne = await models.world.create({ name: 'Terra One' });\n\n  await models.worldUser.create({ userId: userOne.id, worldId: worldOne.id });\n\n  await models.world.create({ name: 'New world' });\n\n  await models.node.create({ worldId: worldOne.id, pos: [10, 0, 25] })\n  await models.node.create({ worldId: worldOne.id, pos: [10, 0, 10] })\n  await models.node.create({ worldId: worldOne.id, pos: [18, 0, 10] })\n}\n\n// ---- generation functions ---\n\nfunction forEachEntityExport(exportName: string, callback: (entity: any, entityName: string) => void) {\n  fs.readdirSync('./entities').forEach(file => {\n    const entityName = file.slice(0, -3);\n    const entity = require('./entities/' + entityName);\n    if (!entity[exportName]) console.error(`No \"${exportName}\" found for \"${entityName}\" entity.`)\n\n    callback.call(undefined, entity, entityName);\n  });\n}\n\nfunction generateModels() {\n  const newModels: Record<string, any> = {};\n  forEachEntityExport('define', (entity, entityName) => {\n    newModels[entityName] = entity.define(sequelize);\n  })\n\n  // could import \"association\" functions here from elsewhere and call them here using `modelsasdf`\n  newModels.world.belongsToMany(newModels.user, { through: newModels.worldUser });\n  newModels.user.belongsToMany(newModels.world, { through: newModels.worldUser });\n  newModels.world.hasMany(newModels.node);\n  newModels.node.belongsTo(newModels.world);\n\n  return newModels;\n};\n\nfunction generateTypeDefs() {\n  const typeDefImports: string[] = [];\n  forEachEntityExport('typeDefs', (entity, entityName) => {\n    typeDefImports.push(entity.typeDefs);\n  })\n  return gql`${typeDefImports.join('')}`;\n}\n\nfunction generateResolvers() {\n  const resolvers = {};\n\n  forEachEntityExport('resolvers', (entity, entityName) => {\n    const entityResolvers = entity.resolvers(models);\n    merge(resolvers, entityResolvers);\n  })\n\n  return resolvers;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,mBAAkB;AAClB,gCAAoB;AACpB,uBAA0B;AAC1B,oBAAqC;AAErC,MAAM,YAAY,IAAI,2BAAU,QAAQ,IAAI;AAErC,MAAM,SAAS;AAEtB,MAAM,WAAW;AACjB,MAAM,YAAY;AACX,MAAM,SAAS,wCAAqB,EAAE,UAAU;AAGhD,MAAM,eAAe,YAAY;AACtC,QAAM,UAAU,KAAK,EAAE,OAAO;AAE9B,QAAM,UAAU,MAAM,OAAO,KAAK,OAAO,EAAE,UAAU;AACrD,QAAM,WAAW,MAAM,OAAO,MAAM,OAAO,EAAE,MAAM;AAEnD,QAAM,OAAO,UAAU,OAAO,EAAE,QAAQ,QAAQ,IAAI,SAAS,SAAS;AAEtE,QAAM,OAAO,MAAM,OAAO,EAAE,MAAM;AAElC,QAAM,OAAO,KAAK,OAAO,EAAE,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AAC9D,QAAM,OAAO,KAAK,OAAO,EAAE,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AAC9D,QAAM,OAAO,KAAK,OAAO,EAAE,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AAAA;AAKhE,6BAA6B,YAAoB,UAAqD;AACpG,oBAAG,YAAY,cAAc,QAAQ,UAAQ;AAC3C,UAAM,aAAa,KAAK,MAAM,GAAG;AACjC,UAAM,SAAS,QAAQ,gBAAgB;AACvC,QAAI,CAAC,OAAO;AAAa,cAAQ,MAAM,OAAO,0BAA0B;AAExE,aAAS,KAAK,QAAW,QAAQ;AAAA;AAAA;AAIrC,0BAA0B;AACxB,QAAM,YAAiC;AACvC,sBAAoB,UAAU,CAAC,QAAQ,eAAe;AACpD,cAAU,cAAc,OAAO,OAAO;AAAA;AAIxC,YAAU,MAAM,cAAc,UAAU,MAAM,EAAE,SAAS,UAAU;AACnE,YAAU,KAAK,cAAc,UAAU,OAAO,EAAE,SAAS,UAAU;AACnE,YAAU,MAAM,QAAQ,UAAU;AAClC,YAAU,KAAK,UAAU,UAAU;AAEnC,SAAO;AAAA;AACR;AAED,4BAA4B;AAC1B,QAAM,iBAA2B;AACjC,sBAAoB,YAAY,CAAC,QAAQ,eAAe;AACtD,mBAAe,KAAK,OAAO;AAAA;AAE7B,SAAO,gCAAM,eAAe,KAAK;AAAA;AAGnC,6BAA6B;AAC3B,QAAM,aAAY;AAElB,sBAAoB,aAAa,CAAC,QAAQ,eAAe;AACvD,UAAM,kBAAkB,OAAO,UAAU;AACzC,8BAAM,YAAW;AAAA;AAGnB,SAAO;AAAA;",
  "names": []
}
