{
  "version": 3,
  "sources": ["../schema.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport merge from 'lodash/merge';\nimport { gql } from 'apollo-server-core';\nimport { Sequelize } from 'sequelize';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nconst sequelize = new Sequelize(process.env.POSTGRES as string);\n\nconst entities: any[] = [];\nconst models: Record<string, any> = {};\nconst typeDefImports: string[] = [];\n\nfs.readdirSync('./entities').forEach(file => {\n  const entityName = file.slice(0, -3);\n  const entity = require('./entities/' + entityName);\n\n  for (const property of ['define', 'resolvers', 'typeDefs']) {\n    if (!entity[property]) console.error(`No \"${property}\" found for \"${entityName}\" entity.`)\n  }\n\n  entities.push(entity);\n  \n  models[entityName] = entity.define(sequelize);\n\n  typeDefImports.push(entity.typeDefs);\n});\n\nconst typeDefs = gql`${typeDefImports.join('')}`;\n\n// could import \"association\" functions here from elsewhere and call them here using `models`\nmodels.world.belongsToMany(models.user, { through: models.worldUser });\nmodels.user.belongsToMany(models.world, { through: models.worldUser });\nmodels.world.hasMany(models.node);\nmodels.node.belongsTo(models.world);\n\nconst resolvers = {};\nentities.forEach(entity => {\n  const entityResolvers = entity.resolvers(models);\n  merge(resolvers, entityResolvers);\n});\n\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\n\n// could import seedDatabase functions from elsewhere, and call using `models` here\nconst seedDatabase = async () => {\n  await sequelize.sync({ force: true });\n  \n  const userOne = await models.user.create({ username: 'Phil' });\n  const worldOne = await models.world.create({ name: 'Terra One'});\n\n  await models.worldUser.create({ userId: userOne.id, worldId: worldOne.id });\n  \n  await models.world.create({ name: 'New world' });\n\n  await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [10, 0, 25]})\n  await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [10, 0, 10]})\n  await resolvers.Mutation.createNode(undefined, {worldId: worldOne.id, pos: [18, 0, 10]})\n}\n\nmodule.exports = { schema, seedDatabase, models };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,gBAAe;AACf,mBAAkB;AAClB,gCAAoB;AACpB,uBAA0B;AAC1B,oBAAqC;AAErC,MAAM,YAAY,IAAI,2BAAU,QAAQ,IAAI;AAE5C,MAAM,WAAkB;AACxB,MAAM,SAA8B;AACpC,MAAM,iBAA2B;AAEjC,kBAAG,YAAY,cAAc,QAAQ,UAAQ;AAC3C,QAAM,aAAa,KAAK,MAAM,GAAG;AACjC,QAAM,SAAS,QAAQ,gBAAgB;AAEvC,aAAW,YAAY,CAAC,UAAU,aAAa,aAAa;AAC1D,QAAI,CAAC,OAAO;AAAW,cAAQ,MAAM,OAAO,wBAAwB;AAAA;AAGtE,WAAS,KAAK;AAEd,SAAO,cAAc,OAAO,OAAO;AAEnC,iBAAe,KAAK,OAAO;AAAA;AAG7B,MAAM,WAAW,gCAAM,eAAe,KAAK;AAG3C,OAAO,MAAM,cAAc,OAAO,MAAM,EAAE,SAAS,OAAO;AAC1D,OAAO,KAAK,cAAc,OAAO,OAAO,EAAE,SAAS,OAAO;AAC1D,OAAO,MAAM,QAAQ,OAAO;AAC5B,OAAO,KAAK,UAAU,OAAO;AAE7B,MAAM,YAAY;AAClB,SAAS,QAAQ,YAAU;AACzB,QAAM,kBAAkB,OAAO,UAAU;AACzC,4BAAM,WAAW;AAAA;AAInB,MAAM,SAAS,wCAAqB,EAAE,UAAU;AAGhD,MAAM,eAAe,YAAY;AAC/B,QAAM,UAAU,KAAK,EAAE,OAAO;AAE9B,QAAM,UAAU,MAAM,OAAO,KAAK,OAAO,EAAE,UAAU;AACrD,QAAM,WAAW,MAAM,OAAO,MAAM,OAAO,EAAE,MAAM;AAEnD,QAAM,OAAO,UAAU,OAAO,EAAE,QAAQ,QAAQ,IAAI,SAAS,SAAS;AAEtE,QAAM,OAAO,MAAM,OAAO,EAAE,MAAM;AAElC,QAAM,UAAU,SAAS,WAAW,QAAW,EAAC,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AACnF,QAAM,UAAU,SAAS,WAAW,QAAW,EAAC,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AACnF,QAAM,UAAU,SAAS,WAAW,QAAW,EAAC,SAAS,SAAS,IAAI,KAAK,CAAC,IAAI,GAAG;AAAA;AAGrF,OAAO,UAAU,EAAE,QAAQ,cAAc;",
  "names": []
}
