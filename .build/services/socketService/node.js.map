{
  "version": 3,
  "sources": ["../../../services/socketService/node.ts"],
  "sourcesContent": ["const { ChangeSet } = require('@codemirror/state');\nconst { Update } = require('@codemirror/collab'); \nconst { models } = require('../../schema');\n\nfunction nodeInit(socket, getNode) {\n  socket.on('joinNode', async ({name, nodeId}) => {\n    socket.join(`node-${nodeId}`);\n    const node = await getNode(nodeId);\n    const init = {\n      doc: node.doc.toString(), \n      rev: node.updates.length\n    }\n    socket.emit('initContent', init);\n    joinNode(nodeId, node, name);\n    \n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'joined node ' + nodeId);\n  });\n\n  socket.on('leaveNode', ({name, nodeId}) => {\n    socket.leave(`node-${nodeId}`);\n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'left node ' + nodeId);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('client disconnected from socket, for node stuff')\n  });\n\n  // ------- OT logic --------\n  \n  function joinNode (nodeId, node, name) {\n    node.users[socket.id] = {name};\n\n    console.log(`user ${name} joined node ${nodeId}`);\n\n    socket.on('pullUpdates', ({rev}) => {\n      if (rev < node.updates.length){\n        resToPullUpdates(node.updates.slice(rev));\n      } else {\n        node.pending.push(resToPullUpdates)\n      }\n    });\n    \n    function resToPullUpdates (updates) {\n      socket.emit('pullUpdatesRes', updates);\n    }\n\n    socket.on('pushUpdates', ({rev, updates}) => {\n      if (rev != node.updates.length) {\n        resToPushUpdates(false);\n      } else {\n        for (let update of updates) {\n          let changes = ChangeSet.fromJSON(update.changes);\n          let effects = JSON.parse(update.effects);\n          console.log(\"EFFECTS: \", effects);\n          node.updates.push({changes, effects: update.effects, clientId: update.clientID})\n          node.doc = changes.apply(node.doc);\n          models.node.update(\n            { content: node.doc.toString() },\n            { where: { id: nodeId }}\n          );\n        }\n        resToPushUpdates(true);\n        while (node.pending.length){\n          node.pending.pop()!(updates);\n        }\n      }\n    });\n\n    function resToPushUpdates(didSucceed) {\n      socket.emit('pushUpdatesRes', didSucceed);\n    }\n  }\n}\n\nmodule.exports = nodeInit;"],
  "mappings": "AAAA,MAAM,EAAE,cAAc,QAAQ;AAC9B,MAAM,EAAE,WAAW,QAAQ;AAC3B,MAAM,EAAE,WAAW,QAAQ;AAE3B,kBAAkB,QAAQ,SAAS;AACjC,SAAO,GAAG,YAAY,OAAO,EAAC,MAAM,aAAY;AAC9C,WAAO,KAAK,QAAQ;AACpB,UAAM,OAAO,MAAM,QAAQ;AAC3B,UAAM,OAAO;AAAA,MACX,KAAK,KAAK,IAAI;AAAA,MACd,KAAK,KAAK,QAAQ;AAAA;AAEpB,WAAO,KAAK,eAAe;AAC3B,aAAS,QAAQ,MAAM;AAEvB,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,iBAAiB;AAAA;AAGxE,SAAO,GAAG,aAAa,CAAC,EAAC,MAAM,aAAY;AACzC,WAAO,MAAM,QAAQ;AACrB,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,eAAe;AAAA;AAGtE,SAAO,GAAG,cAAc,MAAM;AAC5B,YAAQ,IAAI;AAAA;AAKd,oBAAmB,QAAQ,MAAM,MAAM;AACrC,SAAK,MAAM,OAAO,MAAM,EAAC;AAEzB,YAAQ,IAAI,QAAQ,oBAAoB;AAExC,WAAO,GAAG,eAAe,CAAC,EAAC,UAAS;AAClC,UAAI,MAAM,KAAK,QAAQ,QAAO;AAC5B,yBAAiB,KAAK,QAAQ,MAAM;AAAA,aAC/B;AACL,aAAK,QAAQ,KAAK;AAAA;AAAA;AAItB,8BAA2B,SAAS;AAClC,aAAO,KAAK,kBAAkB;AAAA;AAGhC,WAAO,GAAG,eAAe,CAAC,EAAC,KAAK,cAAa;AAC3C,UAAI,OAAO,KAAK,QAAQ,QAAQ;AAC9B,yBAAiB;AAAA,aACZ;AACL,iBAAS,UAAU,SAAS;AAC1B,cAAI,UAAU,UAAU,SAAS,OAAO;AACxC,cAAI,UAAU,KAAK,MAAM,OAAO;AAChC,kBAAQ,IAAI,aAAa;AACzB,eAAK,QAAQ,KAAK,EAAC,SAAS,SAAS,OAAO,SAAS,UAAU,OAAO;AACtE,eAAK,MAAM,QAAQ,MAAM,KAAK;AAC9B,iBAAO,KAAK,OACV,EAAE,SAAS,KAAK,IAAI,cACpB,EAAE,OAAO,EAAE,IAAI;AAAA;AAGnB,yBAAiB;AACjB,eAAO,KAAK,QAAQ,QAAO;AACzB,eAAK,QAAQ,MAAO;AAAA;AAAA;AAAA;AAK1B,8BAA0B,YAAY;AACpC,aAAO,KAAK,kBAAkB;AAAA;AAAA;AAAA;AAKpC,OAAO,UAAU;",
  "names": []
}
