{
  "version": 3,
  "sources": ["../../../services/socketService/node.ts"],
  "sourcesContent": ["function nodeInit(socket, getNode) {\n  const nodeRooms = {};\n  // const revLog = [];\n  // const pendingOps = [];\n  // let content = '';\n\n  socket.on('joinNode', ({name, nodeId}) => {\n    socket.join(`node-${nodeId}`);\n    nodeRooms[socket.id] = `node-${nodeId}`;\n    console.log({nodeRooms});\n    \n    const node = getNode(nodeId);\n    joinNode(nodeId, node);\n    \n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'joined node ' + nodeId);\n  });\n\n  socket.on('leaveNode', ({name, nodeId}) => {\n    socket.leave(`node-${nodeId}`);\n    delete nodeRooms[socket.id];\n    console.log({nodeRooms});\n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'left node ' + nodeId);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('client disconnected from socket, for node stuff')\n    delete nodeRooms[socket.id];\n  });\n\n  function joinNode (nodeId, node) {\n    socket.on('updateText', (op) => {\n      console.log('recieved op: ', op)\n  \n      const {type, pos, text, rev} = op;\n  \n      addPendingOp(op);    \n    });\n\n    function addPendingOp(op) {\n      node.pendingOps.push(op);\n  \n      // for not just execute them right after adding them\n      const nextOp = node.pendingOps.pop();\n      \n      executeOp(nextOp);\n    }\n  \n    function executeOp(op) {\n      applyOp(op);\n      broadcastOp(op);\n      node.revLog.push(op);\n      console.log('revlog: ', node.revLog)\n    }\n  \n    function applyOp({type, pos, text}) {\n      node.content = node.content.slice(0, pos) + text + node.content.slice(pos);\n      console.log('content: ', node.content);\n    }\n    \n    function broadcastOp(op) {\n      socket.in(nodeRooms[socket.id]).emit('textUpdated', op);\n    }\n  }\n}\n\nmodule.exports = nodeInit;"],
  "mappings": "AAAA,kBAAkB,QAAQ,SAAS;AACjC,QAAM,YAAY;AAKlB,SAAO,GAAG,YAAY,CAAC,EAAC,MAAM,aAAY;AACxC,WAAO,KAAK,QAAQ;AACpB,cAAU,OAAO,MAAM,QAAQ;AAC/B,YAAQ,IAAI,EAAC;AAEb,UAAM,OAAO,QAAQ;AACrB,aAAS,QAAQ;AAEjB,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,iBAAiB;AAAA;AAGxE,SAAO,GAAG,aAAa,CAAC,EAAC,MAAM,aAAY;AACzC,WAAO,MAAM,QAAQ;AACrB,WAAO,UAAU,OAAO;AACxB,YAAQ,IAAI,EAAC;AACb,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,eAAe;AAAA;AAGtE,SAAO,GAAG,cAAc,MAAM;AAC5B,YAAQ,IAAI;AACZ,WAAO,UAAU,OAAO;AAAA;AAG1B,oBAAmB,QAAQ,MAAM;AAC/B,WAAO,GAAG,cAAc,CAAC,OAAO;AAC9B,cAAQ,IAAI,iBAAiB;AAE7B,YAAM,EAAC,MAAM,KAAK,MAAM,QAAO;AAE/B,mBAAa;AAAA;AAGf,0BAAsB,IAAI;AACxB,WAAK,WAAW,KAAK;AAGrB,YAAM,SAAS,KAAK,WAAW;AAE/B,gBAAU;AAAA;AAGZ,uBAAmB,IAAI;AACrB,cAAQ;AACR,kBAAY;AACZ,WAAK,OAAO,KAAK;AACjB,cAAQ,IAAI,YAAY,KAAK;AAAA;AAG/B,qBAAiB,EAAC,MAAM,KAAK,QAAO;AAClC,WAAK,UAAU,KAAK,QAAQ,MAAM,GAAG,OAAO,OAAO,KAAK,QAAQ,MAAM;AACtE,cAAQ,IAAI,aAAa,KAAK;AAAA;AAGhC,yBAAqB,IAAI;AACvB,aAAO,GAAG,UAAU,OAAO,KAAK,KAAK,eAAe;AAAA;AAAA;AAAA;AAK1D,OAAO,UAAU;",
  "names": []
}
