{
  "version": 3,
  "sources": ["../../../services/socketService/nodeV1.ts"],
  "sourcesContent": ["// NOTE:\n// code from aborted attempt to make OT system from scratch\n// switched to using Codemirror 6 Collab module.\n\n// in parent:\n// const nodes = {};\n\n//   async function getNode (nodeId) {\n//     if (!(nodeId in nodes)) {\n//       // get content from database\n      \n//       const node = await models.node.findOne({ where: { id: nodeId } });\n\n//       const content = node.toJSON().content;\n\n//       console.log(\"got node content from db: \", content);\n    \n//       nodes[nodeId] = { \n//         revLog: [], \n//         pendingOps: [], \n//         users: {},\n//         content \n//       };\n//     }\n    \n//     return nodes[nodeId];\n//   }\n\nconst {models} = require('../../schema');\n\nfunction nodeInit(socket, getNode) {\n  // const nodeRooms = {};\n\n  socket.on('joinNode', async ({name, nodeId}) => {\n    socket.join(`node-${nodeId}`);\n    // nodeRooms[socket.id] = `node-${nodeId}`;\n    \n    const node = await getNode(nodeId);\n    socket.emit('initContent', {content: node.content});\n    joinNode(nodeId, node, name);\n    \n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'joined node ' + nodeId);\n  });\n\n  socket.on('leaveNode', ({name, nodeId}) => {\n    socket.leave(`node-${nodeId}`);\n    // delete nodeRooms[socket.id];\n    \n    socket.in(`node-${nodeId}`).emit('broadcast', name + 'left node ' + nodeId);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('client disconnected from socket, for node stuff')\n    // delete nodeRooms[socket.id];\n  });\n\n  // ------- OT logic --------\n  \n  function joinNode (nodeId, node, name) {\n    node.users[socket.id] = {name, selection: { start: 0, end: 0}};\n    \n    socket.on('updateText', (op) => {\n      console.log('recieved op: ', op)\n  \n      addPendingOp(op);    \n    });\n\n    function addPendingOp(op) {\n      node.pendingOps.push(op);\n  \n      // for now, just execute them right after adding them\n      const nextOp = node.pendingOps.pop();\n\n      const transformedOp = transformOp(nextOp);\n      \n      executeOp(transformedOp);\n    }\n\n    // content:  xabc\n    // latest rev:  4\n    // revlog:  [\n    //   { type: 'add', pos: 0, text: 'a', rev: 1 },\n    //   { type: 'add', pos: 1, text: 'b', rev: 2 },\n    //   { type: 'add', pos: 2, text: 'c', rev: 3 },\n    //   { type: 'add', pos: 0, text: 'x', rev: 4 }\n    // ]\n\n    //   { type: 'add', pos: 0, text: 'a', rev: 1 },\n    //   { type: 'add', pos: 0, text: 'b', rev: 1 },\n    //      => pos 1, rev 2\n\n    //   { type: 'add', pos: 0, text: 'a', rev: 1 },\n    //   { type: 'add', pos: 1, text: 'b', rev: 2 },\n    //   { type: 'add', pos: 1, text: 'x', rev: 2 },\n    //      => pos 2, rev 3\n\n    //   { type: 'add', pos: 0, text: 'a', rev: 1 },\n    //   { type: 'add', pos: 1, text: 'b', rev: 2 },''\n    //   { type: 'add', pos: 0, text: 'x', rev: 2 },\n    //      => pos 0, rev 3\n    \n    function transformOp(op) {\n      if (op.rev > node.revLog.length) return op;\n\n      const transformingOps = node.revLog.slice(op.rev - 1);\n\n      for (const tOp of transformingOps) {\n        if (tOp.pos <= op.pos) {\n          op.pos = op.pos + 1;\n        }\n        op.rev = op.rev + 1;\n      }\n      \n      console.log('transform into: ', op);\n      return op;\n    }\n  \n    function executeOp(op) {\n      node.revLog.push(op);\n      console.log('revlog: ', node.revLog)\n\n      applyOp(op);\n      acknowledgeOp(op);\n      broadcastOp(op);\n    }\n  \n    function applyOp({type, pos, text}) {\n      node.content = node.content.slice(0, pos) + text + node.content.slice(pos);\n      console.log('content: ', node.content);\n      models.node.update(\n        { content: node.content },\n        { where: { id: nodeId }}\n      );\n      console.log(' ')\n    }\n\n    function acknowledgeOp(op) {\n      const rev = node.revLog.length;\n      // console.log('latest rev: ', rev)\n      socket.emit('opAcknowledged', {ack: rev});\n    }\n    \n    function broadcastOp(op) {\n      socket.in(`node-${nodeId}`).emit('textUpdated', op);\n    }\n\n    // --- sync selections ---\n\n    socket.on('syncSelection', ({start}) => {\n      console.log('sync selection: ', {start})\n      node.users[socket.id].selection.start = start;\n      console.log(\"updated users object: \")\n      console.log(node.users)\n\n      const {name, selection} = node.users[socket.id];\n      socket.in(`node-${nodeId}`).emit('selectionUpdated', {name, selection })\n    })\n  }\n}\n\nmodule.exports = nodeInit;"],
  "mappings": "AA4BA,MAAM,EAAC,WAAU,QAAQ;AAEzB,kBAAkB,QAAQ,SAAS;AAGjC,SAAO,GAAG,YAAY,OAAO,EAAC,MAAM,aAAY;AAC9C,WAAO,KAAK,QAAQ;AAGpB,UAAM,OAAO,MAAM,QAAQ;AAC3B,WAAO,KAAK,eAAe,EAAC,SAAS,KAAK;AAC1C,aAAS,QAAQ,MAAM;AAEvB,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,iBAAiB;AAAA;AAGxE,SAAO,GAAG,aAAa,CAAC,EAAC,MAAM,aAAY;AACzC,WAAO,MAAM,QAAQ;AAGrB,WAAO,GAAG,QAAQ,UAAU,KAAK,aAAa,OAAO,eAAe;AAAA;AAGtE,SAAO,GAAG,cAAc,MAAM;AAC5B,YAAQ,IAAI;AAAA;AAMd,oBAAmB,QAAQ,MAAM,MAAM;AACrC,SAAK,MAAM,OAAO,MAAM,EAAC,MAAM,WAAW,EAAE,OAAO,GAAG,KAAK;AAE3D,WAAO,GAAG,cAAc,CAAC,OAAO;AAC9B,cAAQ,IAAI,iBAAiB;AAE7B,mBAAa;AAAA;AAGf,0BAAsB,IAAI;AACxB,WAAK,WAAW,KAAK;AAGrB,YAAM,SAAS,KAAK,WAAW;AAE/B,YAAM,gBAAgB,YAAY;AAElC,gBAAU;AAAA;AA0BZ,yBAAqB,IAAI;AACvB,UAAI,GAAG,MAAM,KAAK,OAAO;AAAQ,eAAO;AAExC,YAAM,kBAAkB,KAAK,OAAO,MAAM,GAAG,MAAM;AAEnD,iBAAW,OAAO,iBAAiB;AACjC,YAAI,IAAI,OAAO,GAAG,KAAK;AACrB,aAAG,MAAM,GAAG,MAAM;AAAA;AAEpB,WAAG,MAAM,GAAG,MAAM;AAAA;AAGpB,cAAQ,IAAI,oBAAoB;AAChC,aAAO;AAAA;AAGT,uBAAmB,IAAI;AACrB,WAAK,OAAO,KAAK;AACjB,cAAQ,IAAI,YAAY,KAAK;AAE7B,cAAQ;AACR,oBAAc;AACd,kBAAY;AAAA;AAGd,qBAAiB,EAAC,MAAM,KAAK,QAAO;AAClC,WAAK,UAAU,KAAK,QAAQ,MAAM,GAAG,OAAO,OAAO,KAAK,QAAQ,MAAM;AACtE,cAAQ,IAAI,aAAa,KAAK;AAC9B,aAAO,KAAK,OACV,EAAE,SAAS,KAAK,WAChB,EAAE,OAAO,EAAE,IAAI;AAEjB,cAAQ,IAAI;AAAA;AAGd,2BAAuB,IAAI;AACzB,YAAM,MAAM,KAAK,OAAO;AAExB,aAAO,KAAK,kBAAkB,EAAC,KAAK;AAAA;AAGtC,yBAAqB,IAAI;AACvB,aAAO,GAAG,QAAQ,UAAU,KAAK,eAAe;AAAA;AAKlD,WAAO,GAAG,iBAAiB,CAAC,EAAC,YAAW;AACtC,cAAQ,IAAI,oBAAoB,EAAC;AACjC,WAAK,MAAM,OAAO,IAAI,UAAU,QAAQ;AACxC,cAAQ,IAAI;AACZ,cAAQ,IAAI,KAAK;AAEjB,YAAM,EAAC,aAAM,cAAa,KAAK,MAAM,OAAO;AAC5C,aAAO,GAAG,QAAQ,UAAU,KAAK,oBAAoB,EAAC,aAAM;AAAA;AAAA;AAAA;AAKlE,OAAO,UAAU;",
  "names": []
}
