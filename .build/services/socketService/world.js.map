{
  "version": 3,
  "sources": ["../../../services/socketService/world.ts"],
  "sourcesContent": ["import { addNodeToBlocks, removeNodeFromBlocks } from \"../../utils/blockUtilFns\";\n\nconst { models } = require('../../schema');\n\nfunction worldInit(io, socket, getWorld) {\n  socket.on('joinWorld', async ({name, worldId}) => {\n    socket.join(`world-${worldId}`);\n    const world = await getWorld(worldId);\n    const init = {\n      blocksToAdd: world.blocks, \n    }\n    socket.emit('initWorldBlocks', init);\n    console.log('init world blocks: ', init)\n    joinWorld(worldId, name, world);\n  });\n\n  function joinWorld(worldId, name, world) {\n    const room = `world-${worldId}`;\n    socket.emit('initWorldUsers', {users: world.users});\n\n    const user = {username: name, id: 42};\n    \n    world.users[name] = user;\n    console.log(name + ' joined world of id: ' + worldId);\n\n    socket.in(room).emit('userJoined', {user});\n    io.in(room).emit('newMessage', {\n      message: name + ' joined the world',\n      id: Math.floor(Math.random() * 100000),\n    });\n\n    socket.on('message', message => {\n      io.in(room).emit('newMessage', message);\n    });\n\n    socket.on('addNode', addNode);\n    async function addNode({pos}:{pos: {x: number, y: number, z: number}}) {\n      const scriptNode = await models.node.create({ worldId, pos: [pos.x, pos.y, pos.z] });\n\n      const blocks = world.blocks;\n      const nodeToAdd = addNodeToBlocks(blocks, scriptNode.id, [pos.x, pos.y, pos.z]);\n\n      \n      // const index = pos.x + (gridSideLength * pos.z) + (gridSideLength * gridSideLength * pos.y);\n      // grid[index] = [scriptNode.id, 500];\n\n      io.in(room).emit('blocksUpdate', {blocksToAdd: nodeToAdd});\n      \n      // await models.world.update({grid}, {where: {id: worldId}});\n    }\n    \n    socket.on('deleteNode', deleteNode);\n    async function deleteNode({nodeId}:{nodeId: number}) {\n      const returnedNode = await models.node.findOne({ where: { id: nodeId } });\n      await models.node.destroy({where: { id: nodeId }});\n\n      // const p = returnedNode.pos;\n      // const pos = {x: p[0], y: p[1], z: p[2]};\n\n      let blocks = world.blocks;\n      // const index = pos.x + (gridSideLength * pos.z) + (gridSideLength * gridSideLength * pos.y);\n      // grid[index] = [0, 0];\n\n      removeNodeFromBlocks(blocks, returnedNode.pos);\n\n      // grid.forEach((el, i) => {\n      //   if (el[0] === returnedNode.id) {\n      //     grid[i] = [0, 0];\n      //   }\n      // })\n\n      io.in(room).emit('blocksUpdate', {\n        idOfNodeToRemove: returnedNode.id, \n        nodeIdOfBlocksToRemove: returnedNode.id \n      });\n      \n      // await models.world.update({grid}, {where: {id: worldId}});\n    }\n    \n    socket.on('disconnect', () => {\n      socket.in(room).emit('userLeft', {user});\n      io.in(room).emit('newMessage', {\n        message: name + ' left the world',\n        id: Math.floor(Math.random() * 100000),\n      });\n      delete world.users[name];\n    })\n  }\n\n}\nmodule.exports = worldInit;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,0BAAsD;AAEtD,MAAM,EAAE,WAAW,QAAQ;AAE3B,mBAAmB,IAAI,QAAQ,UAAU;AACvC,SAAO,GAAG,aAAa,OAAO,EAAC,MAAM,cAAa;AAChD,WAAO,KAAK,SAAS;AACrB,UAAM,QAAQ,MAAM,SAAS;AAC7B,UAAM,OAAO;AAAA,MACX,aAAa,MAAM;AAAA;AAErB,WAAO,KAAK,mBAAmB;AAC/B,YAAQ,IAAI,uBAAuB;AACnC,cAAU,SAAS,MAAM;AAAA;AAG3B,qBAAmB,SAAS,MAAM,OAAO;AACvC,UAAM,OAAO,SAAS;AACtB,WAAO,KAAK,kBAAkB,EAAC,OAAO,MAAM;AAE5C,UAAM,OAAO,EAAC,UAAU,MAAM,IAAI;AAElC,UAAM,MAAM,QAAQ;AACpB,YAAQ,IAAI,OAAO,0BAA0B;AAE7C,WAAO,GAAG,MAAM,KAAK,cAAc,EAAC;AACpC,OAAG,GAAG,MAAM,KAAK,cAAc;AAAA,MAC7B,SAAS,OAAO;AAAA,MAChB,IAAI,KAAK,MAAM,KAAK,WAAW;AAAA;AAGjC,WAAO,GAAG,WAAW,aAAW;AAC9B,SAAG,GAAG,MAAM,KAAK,cAAc;AAAA;AAGjC,WAAO,GAAG,WAAW;AACrB,2BAAuB,EAAC,OAA+C;AACrE,YAAM,aAAa,MAAM,OAAO,KAAK,OAAO,EAAE,SAAS,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI;AAE/E,YAAM,SAAS,MAAM;AACrB,YAAM,YAAY,yCAAgB,QAAQ,WAAW,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI;AAM5E,SAAG,GAAG,MAAM,KAAK,gBAAgB,EAAC,aAAa;AAAA;AAKjD,WAAO,GAAG,cAAc;AACxB,8BAA0B,EAAC,UAA0B;AACnD,YAAM,eAAe,MAAM,OAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,IAAI;AAC9D,YAAM,OAAO,KAAK,QAAQ,EAAC,OAAO,EAAE,IAAI;AAKxC,UAAI,SAAS,MAAM;AAInB,oDAAqB,QAAQ,aAAa;AAQ1C,SAAG,GAAG,MAAM,KAAK,gBAAgB;AAAA,QAC/B,kBAAkB,aAAa;AAAA,QAC/B,wBAAwB,aAAa;AAAA;AAAA;AAMzC,WAAO,GAAG,cAAc,MAAM;AAC5B,aAAO,GAAG,MAAM,KAAK,YAAY,EAAC;AAClC,SAAG,GAAG,MAAM,KAAK,cAAc;AAAA,QAC7B,SAAS,OAAO;AAAA,QAChB,IAAI,KAAK,MAAM,KAAK,WAAW;AAAA;AAEjC,aAAO,MAAM,MAAM;AAAA;AAAA;AAAA;AAKzB,OAAO,UAAU;",
  "names": []
}
