{
  "version": 3,
  "sources": ["../../sockets/index.ts"],
  "sourcesContent": ["import { Text } from '@codemirror/state';\nimport { nodeInit } from './node';\nimport { worldInit } from './world';\nimport { interpretGen } from '../services/interpreterService';\nimport { models } from '../schema';\nimport { addNewBlocksToBlocks, addNodeToBlocks, BlocksObj } from \"../utils/blockUtils\";\nimport { Server } from 'socket.io';\n\nexport const initSocketService = (io: Server) => {\n  const nodes: Record<any, any> = {};\n  const worlds: Record<any, any> = {};\n\n  async function getNode(nodeId: number) {\n    if (!(nodeId in nodes)) {\n      const node = await models.node.findOne({ where: { id: nodeId } });\n\n      const content = node.toJSON().content;\n\n      nodes[nodeId] = {\n        updates: [],\n        pending: [],\n        doc: Text.of([content]),\n        users: {}\n      };\n    }\n    \n    return nodes[nodeId];\n  }\n\n  async function getWorld(worldId: number) {\n    if (!(worldId in worlds)) {\n      const nodes = await models.node.findAll({ where: { worldId }, order: [['id', 'ASC']] });\n      const blocks: BlocksObj = {};\n\n      for (let node of nodes) {\n        const { blocks: nodeBlocks } = await interpretGen(node.content);\n\n        addNodeToBlocks(blocks, node.id, node.pos);\n        addNewBlocksToBlocks(blocks, node.id, node.pos, nodeBlocks)\n      }\n\n      worlds[worldId] = {\n        users: {},\n        blocks // example: {2: [1,500], 4: [1,8]]\n      }\n    }\n    return worlds[worldId];\n  }\n\n  io.on('connection', socket => {\n    console.log('client connected to socket');\n\n    worldInit(io, socket, getWorld);\n    nodeInit(io, socket, getNode, getWorld);\n\n    socket.on('disconnect', () => {\n      console.log('client disconnected')\n    })\n  });\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAqB;AACrB,kBAAyB;AACzB,mBAA0B;AAC1B,gCAA6B;AAC7B,oBAAuB;AACvB,wBAAiE;AAG1D,MAAM,oBAAoB,CAAC,OAAe;AAC/C,QAAM,QAA0B;AAChC,QAAM,SAA2B;AAEjC,yBAAuB,QAAgB;AACrC,QAAI,CAAE,WAAU,QAAQ;AACtB,YAAM,OAAO,MAAM,qBAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,IAAI;AAEtD,YAAM,UAAU,KAAK,SAAS;AAE9B,YAAM,UAAU;AAAA,QACd,SAAS;AAAA,QACT,SAAS;AAAA,QACT,KAAK,kBAAK,GAAG,CAAC;AAAA,QACd,OAAO;AAAA;AAAA;AAIX,WAAO,MAAM;AAAA;AAGf,0BAAwB,SAAiB;AACvC,QAAI,CAAE,YAAW,SAAS;AACxB,YAAM,SAAQ,MAAM,qBAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,WAAW,OAAO,CAAC,CAAC,MAAM;AAC7E,YAAM,SAAoB;AAE1B,eAAS,QAAQ,QAAO;AACtB,cAAM,EAAE,QAAQ,eAAe,MAAM,4CAAa,KAAK;AAEvD,+CAAgB,QAAQ,KAAK,IAAI,KAAK;AACtC,oDAAqB,QAAQ,KAAK,IAAI,KAAK,KAAK;AAAA;AAGlD,aAAO,WAAW;AAAA,QAChB,OAAO;AAAA,QACP;AAAA;AAAA;AAGJ,WAAO,OAAO;AAAA;AAGhB,KAAG,GAAG,cAAc,YAAU;AAC5B,YAAQ,IAAI;AAEZ,gCAAU,IAAI,QAAQ;AACtB,8BAAS,IAAI,QAAQ,SAAS;AAE9B,WAAO,GAAG,cAAc,MAAM;AAC5B,cAAQ,IAAI;AAAA;AAAA;AAAA;",
  "names": []
}
