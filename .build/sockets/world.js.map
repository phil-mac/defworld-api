{
  "version": 3,
  "sources": ["../../sockets/world.ts"],
  "sourcesContent": ["import { Server, Socket } from 'socket.io';\nimport { addNodeToBlocks, removeNodeFromBlocks } from \"../utils/blockUtils\";\nimport { models } from '../schema';\n\nexport function worldInit(io: Server, socket: Socket, getWorld: any) {\n  socket.on('joinWorld', async ({ name, worldId }) => {\n    socket.join(`world-${worldId}`);\n    const world = await getWorld(worldId);\n    const init = {\n      blocksToAdd: world.blocks,\n    }\n    socket.emit('initWorldBlocks', init);\n    console.log('init world blocks: ', init)\n    joinWorld(worldId, name, world);\n  });\n\n  function joinWorld(worldId: string, name: string, world: any) {\n    const room = `world-${worldId}`;\n    socket.emit('initWorldUsers', { users: world.users });\n\n    const user = { username: name, id: 42 };\n\n    world.users[name] = user;\n    console.log(name + ' joined world of id: ' + worldId);\n\n    socket.in(room).emit('userJoined', { user });\n    io.in(room).emit('newMessage', {\n      message: name + ' joined the world',\n      id: Math.floor(Math.random() * 100000),\n    });\n\n    socket.on('message', message => {\n      io.in(room).emit('newMessage', message);\n    });\n\n    socket.on('addNode', addNode);\n    async function addNode({ pos }: { pos: { x: number, y: number, z: number } }) {\n      const scriptNode = await models.node.create({ worldId, pos: [pos.x, pos.y, pos.z] });\n\n      const blocks = world.blocks;\n      const nodeToAdd = addNodeToBlocks(blocks, scriptNode.id, [pos.x, pos.y, pos.z]);\n\n      io.in(room).emit('blocksUpdate', { blocksToAdd: nodeToAdd });\n    }\n\n    socket.on('deleteNode', deleteNode);\n    async function deleteNode({ nodeId }: { nodeId: number }) {\n      const returnedNode = await models.node.findOne({ where: { id: nodeId } });\n      await models.node.destroy({ where: { id: nodeId } });\n\n      let blocks = world.blocks;\n      removeNodeFromBlocks(blocks, returnedNode.pos);\n\n      io.in(room).emit('blocksUpdate', {\n        idOfNodeToRemove: returnedNode.id,\n        nodeIdOfBlocksToRemove: returnedNode.id\n      });\n    }\n\n    socket.on('disconnect', () => {\n      socket.in(room).emit('userLeft', { user });\n      io.in(room).emit('newMessage', {\n        message: name + ' left the world',\n        id: Math.floor(Math.random() * 100000),\n      });\n      delete world.users[name];\n    })\n  }\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,wBAAsD;AACtD,oBAAuB;AAEhB,mBAAmB,IAAY,QAAgB,UAAe;AACnE,SAAO,GAAG,aAAa,OAAO,EAAE,MAAM,cAAc;AAClD,WAAO,KAAK,SAAS;AACrB,UAAM,QAAQ,MAAM,SAAS;AAC7B,UAAM,OAAO;AAAA,MACX,aAAa,MAAM;AAAA;AAErB,WAAO,KAAK,mBAAmB;AAC/B,YAAQ,IAAI,uBAAuB;AACnC,cAAU,SAAS,MAAM;AAAA;AAG3B,qBAAmB,SAAiB,MAAc,OAAY;AAC5D,UAAM,OAAO,SAAS;AACtB,WAAO,KAAK,kBAAkB,EAAE,OAAO,MAAM;AAE7C,UAAM,OAAO,EAAE,UAAU,MAAM,IAAI;AAEnC,UAAM,MAAM,QAAQ;AACpB,YAAQ,IAAI,OAAO,0BAA0B;AAE7C,WAAO,GAAG,MAAM,KAAK,cAAc,EAAE;AACrC,OAAG,GAAG,MAAM,KAAK,cAAc;AAAA,MAC7B,SAAS,OAAO;AAAA,MAChB,IAAI,KAAK,MAAM,KAAK,WAAW;AAAA;AAGjC,WAAO,GAAG,WAAW,aAAW;AAC9B,SAAG,GAAG,MAAM,KAAK,cAAc;AAAA;AAGjC,WAAO,GAAG,WAAW;AACrB,2BAAuB,EAAE,OAAqD;AAC5E,YAAM,aAAa,MAAM,qBAAO,KAAK,OAAO,EAAE,SAAS,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI;AAE/E,YAAM,SAAS,MAAM;AACrB,YAAM,YAAY,uCAAgB,QAAQ,WAAW,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI;AAE5E,SAAG,GAAG,MAAM,KAAK,gBAAgB,EAAE,aAAa;AAAA;AAGlD,WAAO,GAAG,cAAc;AACxB,8BAA0B,EAAE,UAA8B;AACxD,YAAM,eAAe,MAAM,qBAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,IAAI;AAC9D,YAAM,qBAAO,KAAK,QAAQ,EAAE,OAAO,EAAE,IAAI;AAEzC,UAAI,SAAS,MAAM;AACnB,kDAAqB,QAAQ,aAAa;AAE1C,SAAG,GAAG,MAAM,KAAK,gBAAgB;AAAA,QAC/B,kBAAkB,aAAa;AAAA,QAC/B,wBAAwB,aAAa;AAAA;AAAA;AAIzC,WAAO,GAAG,cAAc,MAAM;AAC5B,aAAO,GAAG,MAAM,KAAK,YAAY,EAAE;AACnC,SAAG,GAAG,MAAM,KAAK,cAAc;AAAA,QAC7B,SAAS,OAAO;AAAA,QAChB,IAAI,KAAK,MAAM,KAAK,WAAW;AAAA;AAEjC,aAAO,MAAM,MAAM;AAAA;AAAA;AAAA;",
  "names": []
}
