{
  "version": 3,
  "sources": ["../../utils/blockUtils.ts"],
  "sourcesContent": ["import { GenBlock } from \"../services/interpreterService\";\nimport { colorToId } from \"./cssColors\";\n\nexport const gridSideLength = 64;\n\nexport type Block = [number, number];\nexport type BlocksObj = Record<number, Block>;\nexport type Coords = [number, number, number];\n\nexport function indexFromCoords([x, y, z]: Coords) {\n  return x + (gridSideLength * z) + (gridSideLength * gridSideLength * y);\n}\n\nexport function addNodeToBlocks(blocks: BlocksObj, nodeId: number, pos: Coords) {\n  const nodeIndex = indexFromCoords(pos);\n  blocks[nodeIndex] = [nodeId, 500];\n  const blocksToAdd: BlocksObj = {};\n  blocksToAdd[nodeIndex] = [nodeId, 500];\n  return blocksToAdd;\n}\n\nexport function addNewBlocksToBlocks(\n  blocks: Record<number, {}>,\n  nodeId: number,\n  nodePos: number[],\n  newBlocks: GenBlock[]\n) {\n  const addedBlocks: BlocksObj = {};\n  newBlocks.forEach(block => {\n    const x = nodePos[0] + block.x;\n    const y = nodePos[1] + block.y;\n    const z = nodePos[2] + block.z;\n    const index = indexFromCoords([x, y, z]);\n\n    const colorId = !!block.color ? colorToId(block.color) : -1;\n    if (!blocks[index]) {\n      blocks[index] = [nodeId, colorId];\n      addedBlocks[index] = [nodeId, colorId];\n    }\n  });\n  return addedBlocks;\n}\n\nexport function removeBlocksFromBlocks(\n  blocks: BlocksObj,\n  nodeIdOfBlocksToRemove: number\n) {\n  for (let index in blocks) {\n    if (blocks[index][0] === nodeIdOfBlocksToRemove && blocks[index][1] !== 500) {\n      delete blocks[index];\n    }\n  }\n}\n\nexport function removeNodeFromBlocks(blocks: BlocksObj, nodePos: Coords,) {\n  const nodeIndex = indexFromCoords(nodePos);\n  delete blocks[nodeIndex];\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAA0B;AAEnB,MAAM,iBAAiB;AAMvB,yBAAyB,CAAC,GAAG,GAAG,IAAY;AACjD,SAAO,IAAK,iBAAiB,IAAM,iBAAiB,iBAAiB;AAAA;AAGhE,yBAAyB,QAAmB,QAAgB,KAAa;AAC9E,QAAM,YAAY,gBAAgB;AAClC,SAAO,aAAa,CAAC,QAAQ;AAC7B,QAAM,cAAyB;AAC/B,cAAY,aAAa,CAAC,QAAQ;AAClC,SAAO;AAAA;AAGF,8BACL,QACA,QACA,SACA,WACA;AACA,QAAM,cAAyB;AAC/B,YAAU,QAAQ,WAAS;AACzB,UAAM,IAAI,QAAQ,KAAK,MAAM;AAC7B,UAAM,IAAI,QAAQ,KAAK,MAAM;AAC7B,UAAM,IAAI,QAAQ,KAAK,MAAM;AAC7B,UAAM,QAAQ,gBAAgB,CAAC,GAAG,GAAG;AAErC,UAAM,UAAU,CAAC,CAAC,MAAM,QAAQ,gCAAU,MAAM,SAAS;AACzD,QAAI,CAAC,OAAO,QAAQ;AAClB,aAAO,SAAS,CAAC,QAAQ;AACzB,kBAAY,SAAS,CAAC,QAAQ;AAAA;AAAA;AAGlC,SAAO;AAAA;AAGF,gCACL,QACA,wBACA;AACA,WAAS,SAAS,QAAQ;AACxB,QAAI,OAAO,OAAO,OAAO,0BAA0B,OAAO,OAAO,OAAO,KAAK;AAC3E,aAAO,OAAO;AAAA;AAAA;AAAA;AAKb,8BAA8B,QAAmB,SAAkB;AACxE,QAAM,YAAY,gBAAgB;AAClC,SAAO,OAAO;AAAA;",
  "names": []
}
